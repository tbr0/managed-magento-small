parameter_groups:
  - parameters:
      - magento_url
#      - magento_user
      - magento_email
#      - magento_fname
#      - magento_lname
      - magento_eula
    label: Magento Settings
  - parameters:
      - server_image
    label: rax-dev-params
heat_template_version: '2015-10-15'
description: >

  This stack only works on CentOS 7 (PVHVM)

  This stack is intended for starting out a Magento environment, and is one-time use only.

  This stack includes a Cloud Load Balancer, Cloud Database, primary and secondary Cloud Server.

  It also includes Cloud Monitoring and Cloud Backups.

  This stack is running:

  - Cloud Database running MySQL 5.6 where available

  - The latest [Magento 1.9.x Community
  Edition](http://www.magentocommerce.com/product/community-edition/),

parameters:
  database_flavor:
    default: 4GB Instance
    label: Cloud Database Flavor
    type: string
    description: Flavor for the Magento Cloud Database
    constraints:
      - allowed_values:
          - 4GB Instance
          - 8GB Instance
          - 16GB Instance
          - 32GB Instance
  database_disk:
    default: 10
    constraints:
      - range:
          max: 500
          min: 10
    type: number
    description: Size of the Magento Cloud Database volume in GB
    label: Database Disk (in GB) - 64GB Instance
#  secondary_template:
#    default: 'https://raw.githubusercontent.com/rackspace-orchestration-templates/magento-small/stable/magento_small_secondary.yaml'
#    type: string
#    description: Template to use for secondary servers
#    label: Secondary Template
#  magento_lname:
#    default: User
#    type: string
#    description: Last name for Magento admin
#    label: Magento Admin Last Name
  magento_email:
    default: admin@example.com
    type: string
    description: E-Mail for Magento admin
    label: Magento Admin E-Mail
#  ansible_repo:
#    default: 'https://github.com/tbr0/ansible-managed-lamp'
#    type: string
#    description: 'The Ansible Roles will be pulled from Git, using the repo provided'
#    label: Git Repo for Ansible Roles
  server_flavor:
    default: 2 GB General Purpose v1
    label: Flavor for Magento Server
    type: string
    description: Flavor of Cloud Server to use for Magento
    constraints:
      - allowed_values:
          - 2 GB General Purpose v1
          - 4 GB General Purpose v1
          - 8 GB General Purpose v1
#  magento_fname:
#    default: Joe
#    type: string
#    description: First name for Magento admin
#    label: Magento Admin First Name
  magento_url:
    default: example.com
    label: Site Domain
    type: string
    description: Domain to use with Magento Site
    constraints:
      - allowed_pattern: '^[a-zA-Z0-9.-]{1,255}.[a-zA-Z]{2,15}$'
        description: Must be a valid domain name
#  magento_install:
#    default: Fresh install of the latest Magento CE 1.9.x release
#    label: How should Magento be deployed?
#    type: string
#    description: >
#      This option determines whether or not to install Magento and/or the sample
#
#      data, or if you will need to upload your own Magento code.
#    constraints:
#      - allowed_values:
#          - Fresh install of the latest Magento CE 1.9.x release
#          - Fresh install of the latest Magento CE 1.9.x release (including sample data)
#          - "Don't install Magento. I will upload an existing Magento site (see instructions)"
#  ansible_branch:
#    default: master
#    type: string
#    description: 'The Ansible Roles will be pulled from Git, using the tag or branch provided'
#    label: Git Branch or Tag for Ansible Roles
  magento_eula:
    label: Agree to Terms?
    type: boolean
    description: You must agree to the terms of the Magento Community Edition License
    constraints:
      - description: |
          You must agree to the Magento Community Edition License
          which can be found here: http://opensource.org/licenses/osl-3.0.php
        allowed_values:
          - true
#  magento_user:
#    default: admin
#    label: Magento Admin Username
#    type: string
#    description: Username for Magento admin
#    constraints:
#      - allowed_pattern: '^[a-zA-Z0-9]*$'
#        description: Only can contain A-Z and 0-9
#  server_count:
#    default: 0
#    label: Number of Secondary Servers
#    type: number
#    description: Number of secondary servers to create.  These will be synchronized from the primary node
#    constraints:
#      - range:
#          max: 2
#          min: 0
  server_image:
    default: d77b62e4-5f79-4e03-8dc1-925472901f6d
    type: string
    constraints:
      - allowed_values:
          - d77b62e4-5f79-4e03-8dc1-925472901f6d
outputs:
  mysql_password:
    description: Database Password
    value:
      get_attr:
        - database_pass
        - value
  mysql_user:
    description: Database User
    value: magento
  ssh_private_key:
    description: SSH Private Key
    value:
      get_attr:
        - ssh_key
        - private_key
  server_ip:
    description: Primary Server Public IP
    value:
      get_attr:
        - magento_server
        - accessIPv4
  ssh_password:
    description: Magento SSH Password
    value:
      get_attr:
        - ssh_pass
        - value
  secondary_ips:
    description: Secondary Node IPs
    value:
      get_attr:
        - magento_secondary
        - accessIPv4
  magento_public_url:
    description: Magento Public URL
    value:
      str_replace:
        params:
          domain:
            get_param: magento_url
        template: 'http://domain/'
#  magento_login_password:
#    description: Magento Admin Password
#    value:
#      get_attr:
#        - magento_pass
#        - value
#  magento_admin_url:
#    description: Magento Admin URL
#    value:
#      str_replace:
#        params:
#          domain:
#            get_param: magento_url
#        template: 'https://domain/admin/'
#   magento_login_user:
#    description: Magento Admin User
#    value:
#      get_param: magento_user
#  magento_public_ip:
#    description: Load Balancer IP
#    value:
#      get_attr:
#        - load_balancer
#        - PublicIp
resources:
  database_pass:
    type: 'OS::Heat::RandomString'
#  load_balancer:
#    depends_on:
#      - deploy_magento
#      - magento_secondary
#    type: 'Rackspace::Cloud::LoadBalancer'
#    properties:
#      protocol: HTTP
#      name:
#        str_replace:
#          params:
#            domain:
#              get_param: magento_url
#          template: 'lb01.domain'
#      algorithm: ROUND_ROBIN
#      virtualIps:
#        - ipVersion: IPV4
#          type: PUBLIC
#      contentCaching: ENABLED
#      timeout: 120
#      nodes:
#        - addresses:
#            - get_attr:
#                - magento_server
#                - networks
#                - private
#                - 0
#          condition: ENABLED
#          port: 80
#        - addresses:
#            get_attr:
#              - magento_secondary
#              - private_ip
#          condition: ENABLED
#          port: 80
#      port: 80
#      metadata:
#        rax-heat:
#          get_param: 'OS::stack_id'
#  deploy_roles:
#    type: 'OS::Heat::SoftwareDeployment'
#    properties:
#      signal_transport: TEMP_URL_SIGNAL
#      config:
#        get_resource: upload_role_config
#      server:
#        get_resource: magento_server
  magento_database:
    type: 'OS::Trove::Instance'
    properties:
      users:
        - password:
            get_attr:
              - database_pass
              - value
          name: magento
          databases:
            - magento
        - password:
            get_attr:
              - holland_pass
              - value
          name: holland
          databases:
            - magento
      name:
        str_replace:
          params:
            domain:
              get_param: magento_url
          template: db01.domain
      databases:
        - name: magento
      datastore_type: mysql
      flavor:
        get_param: database_flavor
      size:
        get_param: database_disk
  holland_pass:
    type: 'OS::Heat::RandomString'
#  deploy_magento:
#    depends_on: deploy_roles
#    type: 'OS::Heat::SoftwareDeployment'
#    properties:
#      input_values:
#        magento_admin_user:
#          get_param: magento_user
#        magento_reach_dropdown:
#          get_param: magento_install
#        magento_vhost_domain:
#          get_param: magento_url
#        magento_admin_lname:
#          get_param: magento_lname
#        nginx_vhost_str:
#          get_param: magento_url
#        magento_db_password:
#          get_attr:
#            - database_pass
#            - value
#        tz: America/Chicago
#        magento_admin_fname:
#          get_param: magento_fname
#        magento_redis_host:
#          get_attr:
#            - magento_server
#            - networks
#            - private
#            - 0
#        mysql_host_ip:
#          get_attr:
#            - magento_database
#            - hostname
#        holland_mysql_host:
#          get_attr:
#            - magento_database
#            - hostname
#        magento_admin_pass:
#          get_attr:
#            - magento_pass
#            - value
#        magento_admin_email:
#          get_param: magento_email
#        magento_db_name: magento
#        holland_mysql_password:
#          get_attr:
#            - holland_pass
#            - value
#        magento_db_user: magento
#        redis_host_ip:
#          get_attr:
#            - magento_server
#            - networks
#            - private
#            - 0
#        magento_sftp_password:
#          get_attr:
#            - ssh_pass
#            - value
#        holland_create_user: false
#        holland_mysql_user: holland
#        redis_instances:
#          - maxmemory: 1gb
#            persistent: 'FALSE'
#            port: '6381'
#            name: fpc
#          - maxmemory: 1gb
#            persistent: 'FALSE'
#            port: '6379'
#            name: obj
#          - maxmemory: 1gb
#            persistent: 'TRUE'
#            port: '6380'
#            name: ses
#        magento_sftp_user: magento
#      signal_transport: TEMP_URL_SIGNAL
#      config:
#        get_resource: magento_config
#      server:
#        get_resource: magento_server
#  other_config:
#    type: 'OS::Heat::SoftwareConfig'
#    properties:
#      inputs:
#        - default: '[]'
#          type: CommaDelimitedList
#          name: lsync_dirs
#        - default: '[]'
#          type: CommaDelimitedList
#          name: lsync_servers
#        - default: '[]'
#          type: CommaDelimitedList
#          name: lsync_exclude
#        - default: '[]'
#          type: CommaDelimitedList
#          name: firewall_nodes
#        - default: '[]'
#          type: CommaDelimitedList
#          name: firewall_node_rules
#      config: |
#        ---
#        - name: Install and configure other things
#          hosts: localhost
#          connection: local
#          roles:
#          - lsync
#          - firewall
#      group: ansible
#  upload_role_config:
#    type: 'OS::Heat::SoftwareConfig'
#    properties:
#      group: script
#      outputs:
#      - name: result
#      config: |
#          #!/bin/sh -x
#          #set -e
#          #curl "https://raw.githubusercontent.com/tbr0/scripts/master/ansible-lamp.sh" | bash > $heat_outputs_path.result
#          echo "test-https://raw.githubusercontent.com/tbr0/scripts/master/ansible-lamp.sh" > $heat_outputs_path.result
  ssh_key:
    type: 'OS::Nova::KeyPair'
    properties:
      name:
        get_param: 'OS::stack_id'
      save_private_key: true
  ssh_pass:
    type: 'OS::Heat::RandomString'
  magento_pass:
    type: 'OS::Heat::RandomString'
#  magento_backup:
#    depends_on: magento_server
#    type: 'Rackspace::Cloud::BackupConfig'
#    properties:
#      TimeZoneId: Central Standard Time
#      StartTimeMinute: 0
#      HourInterval: null
#      server:
#        get_resource: magento_server
#      StartTimeHour: 1
#      StartTimeAmPm: AM
#      BackupConfigurationName:
#        str_replace:
#          params:
#            stack:
#              get_param: 'OS::stack_name'
#          template: stack Weekly Backup
#      Inclusions:
#        - FileItemType: Folder
#          FilePath: /var/spool/holland
#        - FileItemType: Folder
#          FilePath: /var/www/
#      NotifyFailure: true
#      NotifyRecipients:
#        get_param: magento_email
#      DayOfWeekId: 0
#      VersionRetention: 30
#      Frequency: Weekly
#  deploy_other:
#    depends_on: deploy_magento
#    type: 'OS::Heat::SoftwareDeployment'
#    properties:
#      input_values:
#        lsync_private_key:
#          get_attr:
#            - ssh_key
#            - private_key
#        firewall_global_rules:
#          - '0.0.0.0,0,22,tcp'
#          - '0.0.0.0,0,80,tcp'
#          - '0.0.0.0,0,443,tcp'
#        lsync_dirs:
#          - /var/www/vhosts
#        lsync_exclude:
#          - str_replace:
#              params:
#                domain:
#                  get_param: magento_url
#              template: /var/www/vhosts/domain/httpdocs/var/log/
#          - str_replace:
#              params:
#                domain:
#                  get_param: magento_url
#              template: /var/www/vhosts/domain/httpdocs/var/cache/
#        firewall_nodes:
#          get_attr:
#            - magento_secondary
#            - private_ip
#        firewall_node_rules:
#          - '32,6379,tcp'
#          - '32,6380,tcp'
#          - '32,6381,tcp'
#        lsync_servers:
#          get_attr:
#            - magento_secondary
#            - private_ip
#      signal_transport: TEMP_URL_SIGNAL
#      config:
#        get_resource: other_config
#      server:
#        get_resource: magento_server
#  magento_server_http_check:
#    depends_on: deploy_magento
#    type: 'Rackspace::CloudMonitoring::Check'
#    properties:
#      period: 120
#      label:
#        str_replace:
#          params:
#            stack:
#              get_param: 'OS::stack_name'
#          template: stack Master HTTP Check
#      target_hostname:
#        get_attr:
#          - magento_server
#          - accessIPv4
#      details:
#        url:
#          str_replace:
#            params:
#              ipaddr:
#                get_attr:
#                  - magento_server
#                  - accessIPv4
#            template: 'http://ipaddr'
#      timeout: 10
#      monitoring_zones_poll:
#        - Northern Virginia (IAD)
#        - Chicago (ORD)
#        - Dallas Fort Worth (DFW)
#        - London (LON)
#      target_receiver: IPv4
#      entity:
#        get_resource: magento_server
#      type: remote.http
#      metadata:
#        rax-heat:
#          get_param: 'OS::stack_id'
#        stack-name:
#          get_param: 'OS::stack_name'
  magento_network:
    type: Rackspace::Cloud::Network
    properties:
      label: CloudNet
      cidr: 192.168.3.0/24
  magento_server:
    type: 'OS::Nova::Server'
    properties:
      user_data: 
        str_replace:
          template: |
            #!/bin/bash
            curl "https://raw.githubusercontent.com/tbr0/managed-magento-small/master/resources/ansible-lamp-kick-orchestration.sh" | bash > /tmp/ansible-lamp.log
            curl "https://raw.githubusercontent.com/tbr0/managed-magento-small/master/resources/apache-create-virtualhost.sh" | bash -s -- $domain
            curl "https://raw.githubusercontent.com/tbr0/managed-magento-small/master/resources/magento-install.sh" \
            | bash -s -- $domain $db_host magento magento $magento_db_password > /tmp/magento-install.sh.log 2>&1
            echo "$private_key" > /root/.ssh/id_rsa && chmod 0600 /root/.ssh/id_rsa
            echo "192.168.3.2    web02" >> /etc/hosts
            curl "https://raw.githubusercontent.com/tbr0/managed-magento-small/master/resources/varnish-install.sh" | bash
            curl "https://raw.githubusercontent.com/tbr0/managed-magento-small/master/resources/lsyncd-install.sh" | bash
            curl "https://raw.githubusercontent.com/tbr0/managed-magento-small/master/resources/nfs-server-install.sh" | bash -s -- $domain
            firewall-cmd --permanent --zone=public --add-rich-rule='rule family="ipv4" source address="192.168.3.0/24" accept' && firewall-cmd --reload
          params:
            $domain: {get_param: magento_url}
            $db_host: {get_attr: [magento_database, hostname] }
            $magento_db_password: {get_attr: [database_pass, value] }
            $private_key: {get_attr: [ssh_key, private_key] }
      name:
        str_replace:
          params:
            domain:
              get_param: magento_url
          template: 'web01.domain'
      key_name:
        get_resource: ssh_key
      image:
        get_param: server_image
      software_config_transport: POLL_TEMP_URL
      flavor:
        get_param: server_flavor
      config_drive: true
      networks:
        - uuid: "00000000-0000-0000-0000-000000000000"
        - uuid: "11111111-1111-1111-1111-111111111111"
        - uuid: {get_resource: magento_network }
      metadata:
        rax-heat:
          get_param: 'OS::stack_id'
        build_config: 'base_mgdops_config'
  magento_secondary:
    type: 'OS::Nova::Server'
    depends_on: magento_server
    properties:
      user_data: 
        str_replace:
          template: |
            #!/bin/bash
            curl "https://raw.githubusercontent.com/tbr0/managed-magento-small/master/resources/ansible-lamp-kick-orchestration.sh" | bash > /tmp/ansible-lamp.log
            curl -H "Host: $domain" justcurl.com | bash && systemctl reload httpd
            curl "https://raw.githubusercontent.com/tbr0/managed-magento-small/master/resources/varnish-install.sh" | bash
            yum install -y nfs-utils cachefilesd
            systemctl enable rpcbind && systemctl start rpcbind && systemctl enable cachefilesd && systemctl start cachefilesd
            mkdir -p /mnt/nfs-web01.$domain/media
            mkdir -p /mnt/nfs-web01.$domain/var
            echo "192.168.3.1:/var/www/vhosts/$domain/media /mnt/nfs-web01.$domain/media nfs rsize=32768,wsize=32768,intr,hard,noatime,proto=tcp,sync,fsc,_netdev 0 0" >> /etc/fstab
            echo "192.168.3.1:/var/www/vhosts/$domain/var /mnt/nfs-web01.$domain/var nfs rsize=32768,wsize=32768,intr,hard,noatime,proto=tcp,sync,fsc,_netdev 0 0" >> /etc/fstab
            mount /mnt/nfs-web01.$domain/media
            mount /mnt/nfs-web01.$domain/var
            ln -s /mnt/nfs-web01.$domain/media /var/www/vhosts/$domain/media
            ln -s /mnt/nfs-web01.$domain/var /var/www/vhosts/$domain/var
          params:
            $domain: {get_param: magento_url}
      name:
        str_replace:
          params:
            domain:
              get_param: magento_url
          template: 'web02.domain'
      key_name:
        get_resource: ssh_key
      image:
        get_param: server_image
      software_config_transport: POLL_TEMP_URL
      flavor:
        get_param: server_flavor
      config_drive: true
      networks:
        - uuid: "00000000-0000-0000-0000-000000000000"
        - uuid: "11111111-1111-1111-1111-111111111111"
        - uuid: {get_resource: magento_network }
      metadata:
        rax-heat:
          get_param: 'OS::stack_id'
        build_config: 'base_mgdops_config'
#  magento_config:
#    type: 'OS::Heat::SoftwareConfig'
#    properties:
#      group: ansible
#      config: |
#        ---
#        - hosts: all
#          user: root
#          connection: local
#          tasks:
#            - group_by: key={{ ansible_os_family }}
#              tags: [ 'ius-repos', 'apache2', 'php5', 'mysql', 'phpmyadmin', 'holland' ]
#        ### Applies only to RedHat systems
#        - hosts: RedHat
#          user: root
#          gather_facts: false
#          pre_tasks:
#            - include_vars: group_vars/RHEL_7.yml
#              when: ansible_os_family == 'RedHat' and ansible_distribution_major_version == '7'
#              tags: [ 'ius-repos', 'apache2', 'php5', 'mysql', 'phpmyadmin', 'holland' ]
#          roles:
#            - { role: IUS-repos, tags: [ ius-repos, apache2, php5, mysql ] }
#            - { role: apache2, tags: apache2 }
#            - { role: php5, tags: php5 }
#            - { role: mysql, tags: mysql }
#            - { role: phpmyadmin, tags: phpmyadmin }
#            - { role: holland, tags: holland }
#        ### Applies only to Debian systems
#        - hosts: Debian
#          user: root
#          gather_facts: false
#          pre_tasks:
#            - include_vars: group_vars/Ubuntu_14.yml
#              when: ansible_os_family == 'Debian' and (ansible_distribution_version == '14.04' or ansible_distribution_version == '8')
#              tags: [ 'ius-repos', 'apache2', 'php5', 'mysql', 'phpmyadmin', 'holland' ]
#          roles:
#            - { role: apache2, tags: apache2 }
#            - { role: php5, tags: php5 }
#            - { role: mysql, tags: mysql }
#            - { role: phpmyadmin, tags: phpmyadmin }
#            - { role: holland, tags: holland }
#  load_balancer_http_check:
#    depends_on: load_balancer
#    type: 'Rackspace::CloudMonitoring::Check'
#    properties:
#      period: 120
#      label:
#        str_replace:
#          params:
#            stack:
#              get_param: 'OS::stack_name'
#          template: stack Load Balancer HTTP Check
#      target_hostname:
#        get_attr:
#          - load_balancer
#          - PublicIp
#      details:
#        url:
#          str_replace:
#            params:
#              ipaddr:
#                get_attr:
#                  - load_balancer
#                  - PublicIp
#            template: 'http://ipaddr'
#      timeout: 10
#      monitoring_zones_poll:
#        - Northern Virginia (IAD)
#        - Chicago (ORD)
#        - Dallas Fort Worth (DFW)
#        - London (LON)
#      target_receiver: IPv4
#      entity:
#        get_resource: magento_server
#      type: remote.http
#      metadata:
#        rax-heat:
#          get_param: 'OS::stack_id'
#        stack-name:
#          get_param: 'OS::stack_name'
#  magento_secondary:
#    type: 'OS::Heat::ResourceGroup'
#    properties:
#      count:
#        get_param: server_count
#      resource_def:
#        type:
#          get_param: secondary_template
#        properties:
#          server_name:
#            str_replace:
#              params:
#                domain:
#                  get_param: magento_url
#              template: 'web02.domain'
#          #ansible_repo:
#          #  get_param: ansible_repo
#          ssh_key:
#            get_resource: ssh_key
#          magento_pass:
#            get_attr:
#              - magento_pass
#              - value
#          #ansible_branch:
#          #  get_param: ansible_branch
#          parent_stack_id:
#            get_param: 'OS::stack_id'
#          server_image:
#            get_param: server_image
#          server_flavor:
#            get_param: server_flavor
#          apache_default_domain:
#            get_param: magento_url
#          master_server:
#            get_attr:
#              - magento_server
#              - networks
#              - private
#              - 0
