parameter_groups:
  - parameters:
      - magento_url
      - magento_user
      - magento_email
      - magento_fname
      - magento_lname
      - magento_eula
    label: Magento Settings
  - parameters:
      - server_image
    label: rax-dev-params
heat_template_version: '2015-10-15'
description: >

  This stack only works on CentOS 7 (PVHVM)

  This stack is intended for starting out a Magento environment, and is one-time use only, do not modify recipe and run again as it will delete current environment.

  This stack includes a Cloud Load Balancer, Cloud Database, a primary and secondary Cloud Server.

  It also includes Cloud Monitoring and Cloud Backups.

  This stack is running:

  - Cloud Database running MySQL 5.6 where available

  - The latest [Magento 1.9.x Community
  Edition](http://www.magentocommerce.com/product/community-edition/)

  - Lsyncd excluding var/ and media/

  - NFS server on web01 which provides var/ and media/ to NFS client on web02. Location of mounts on web02 is /mnt/nfs-web01.domain.com/

parameters:
  database_flavor:
    default: 4GB Instance
    label: Cloud Database Flavor
    type: string
    description: Flavor for the Magento Cloud Database
    constraints:
      - allowed_values:
          - 4GB Instance
          - 8GB Instance
          - 16GB Instance
          - 32GB Instance
  database_disk:
    default: 10
    constraints:
      - range:
          max: 500
          min: 10
    type: number
    description: Size of the Magento Cloud Database volume in GB
    label: Database Disk (in GB)
  server_image:
    default: d77b62e4-5f79-4e03-8dc1-925472901f6d
    type: string
    constraints:
      - allowed_values:
          - d77b62e4-5f79-4e03-8dc1-925472901f6d
  server_flavor:
    default: 2 GB General Purpose v1
    label: Flavor for Magento Server
    type: string
    description: Flavor of Cloud Server to use for Magento
    constraints:
      - allowed_values:
          - 2 GB General Purpose v1
          - 4 GB General Purpose v1
          - 8 GB General Purpose v1
  magento_fname:
    default: Joe
    type: string
    description: First name for Magento admin
    label: Magento Admin First Name
  magento_lname:
    default: User
    type: string
    description: Last name for Magento admin
    label: Magento Admin Last Name
  magento_email:
    default: admin@example.com
    type: string
    description: E-Mail for Magento admin
    label: Magento Admin E-Mail
  magento_user:
    default: admin
    label: Magento Admin Username
    type: string
    description: Username for Magento admin
    constraints:
      - allowed_pattern: '^[a-zA-Z0-9]*$'
        description: Only can contain A-Z and 0-9
  magento_url:
    default: example.com
    label: Site Domain
    type: string
    description: Domain to use with Magento Site
    constraints:
      - allowed_pattern: '^[a-zA-Z0-9.-]{1,255}.[a-zA-Z]{2,15}$'
        description: Must be a valid domain name
  magento_eula:
    label: Agree to Terms?
    type: boolean
    description: You must agree to the terms of the Magento Community Edition License
    constraints:
      - description: |
          You must agree to the Magento Community Edition License
          which can be found here: http://opensource.org/licenses/osl-3.0.php
        allowed_values:
          - true
outputs:
  mysql_password:
    description: Database Password
    value:
      get_attr:
        - database_pass
        - value
  mysql_user:
    description: Database User
    value: magento
  ssh_private_key:
    description: SSH Private Key
    value:
      get_attr:
        - ssh_key
        - private_key
  server_ip:
    description: Primary Server Public IP
    value:
      get_attr:
        - magento_server
        - accessIPv4
  ssh_password:
    description: Magento SSH Password
    value:
      get_attr:
        - ssh_pass
        - value
  magento_public_url:
    description: Magento Public URL
    value:
      str_replace:
        params:
          domain:
            get_param: magento_url
        template: 'http://domain/'
  magento_login_password:
    description: Magento Admin Password
    value:
      get_attr:
        - magento_pass
        - value
  magento_admin_url:
    description: Magento Admin URL
    value:
      str_replace:
        params:
          domain:
            get_param: magento_url
        template: 'https://domain/admin/'
  magento_login_user:
    description: Magento Admin User
    value:
      get_param: magento_user
  magento_public_ip:
    description: Load Balancer IP
    value:
      get_attr:
        - load_balancer
        - PublicIp
resources:
  database_pass:
    type: 'OS::Heat::RandomString'
  load_balancer:
    depends_on:
      - magento_secondary
    type: 'Rackspace::Cloud::LoadBalancer'
    properties:
      protocol: HTTP
      name:
        str_replace:
          params:
            domain:
              get_param: magento_url
          template: 'lb01.domain'
      algorithm: LEAST_CONNECTIONS
      virtualIps:
        - ipVersion: IPV4
          type: PUBLIC
      contentCaching: ENABLED
      timeout: 120
      nodes:
        - addresses:
            - get_attr:
                - magento_server
                - networks
                - private
                - 0
          condition: ENABLED
          port: 6081
        - addresses:
            get_attr:
              - magento_secondary
              - networks
              - private
          condition: ENABLED
          port: 6081
      port: 80
      metadata:
        rax-heat:
          get_param: 'OS::stack_id'
  magento_database:
    type: 'OS::Trove::Instance'
    properties:
      users:
        - password:
            get_attr:
              - database_pass
              - value
          name: magento
          databases:
            - magento
        - password:
            get_attr:
              - holland_pass
              - value
          name: holland
          databases:
            - magento
      name:
        str_replace:
          params:
            domain:
              get_param: magento_url
          template: db01.domain
      databases:
        - name: magento
      datastore_type: mysql
      flavor:
        get_param: database_flavor
      size:
        get_param: database_disk
  holland_pass:
    type: 'OS::Heat::RandomString'
  ssh_key:
    type: 'OS::Nova::KeyPair'
    properties:
      name:
        get_param: 'OS::stack_id'
      save_private_key: true
  ssh_pass:
    type: 'OS::Heat::RandomString'
  magento_pass:
    type: 'OS::Heat::RandomString'
  magento_network:
    type: Rackspace::Cloud::Network
    properties:
      label: CloudNet
      cidr: 192.168.3.0/24
  magento_server:
    type: 'OS::Nova::Server'
    properties:
      user_data: 
        str_replace:
          template: |
            #!/bin/bash
            curl "https://raw.githubusercontent.com/tbr0/managed-magento-small/master/resources/ansible-lamp-kick-orchestration.sh" | bash > /tmp/ansible-lamp.log
            curl "https://raw.githubusercontent.com/tbr0/managed-magento-small/master/resources/apache-create-virtualhost.sh" | bash -s -- $domain
            curl "https://raw.githubusercontent.com/tbr0/managed-magento-small/master/resources/magento-install.sh" \
            | bash -s -- $domain $db_host magento magento $magento_db_password $magento_fname $magento_lname $magento_email $magento_user $magento_pass > /tmp/magento-install.sh.log 2>&1
            echo "$private_key" > /root/.ssh/id_rsa && chmod 0600 /root/.ssh/id_rsa
            echo "192.168.3.2    web02" >> /etc/hosts
            curl "https://raw.githubusercontent.com/tbr0/managed-magento-small/master/resources/varnish-install.sh" | bash
            curl "https://raw.githubusercontent.com/tbr0/managed-magento-small/master/resources/lsyncd-install.sh" | bash
            curl "https://raw.githubusercontent.com/tbr0/managed-magento-small/master/resources/nfs-server-install.sh" | bash -s -- $domain
            firewall-cmd --permanent --zone=public --add-rich-rule='rule family="ipv4" source address="192.168.3.0/24" accept' && firewall-cmd --reload
            firewall-cmd --permanent --zone=public --add-port=6081/tcp && firewall-cmd --reload
          params:
            $domain: {get_param: magento_url}
            $db_host: {get_attr: [magento_database, hostname] }
            $magento_db_password: {get_attr: [database_pass, value] }
            $private_key: {get_attr: [ssh_key, private_key] }
            $magento_fname: {get_param: magento_fname}
            $magento_lname: {get_param: magento_lname}
            $magento_email: {get_param: magento_email}
            $magento_user: {get_param: magento_user}
            $magento_pass: {get_attr: [magento_pass, value] }
      name:
        str_replace:
          params:
            domain:
              get_param: magento_url
          template: 'web01.domain'
      key_name:
        get_resource: ssh_key
      image:
        get_param: server_image
      software_config_transport: POLL_TEMP_URL
      flavor:
        get_param: server_flavor
      config_drive: true
      networks:
        - uuid: "00000000-0000-0000-0000-000000000000"
        - uuid: "11111111-1111-1111-1111-111111111111"
        - uuid: {get_resource: magento_network }
      metadata:
        rax-heat:
          get_param: 'OS::stack_id'
        build_config: 'base_mgdops_config'
  magento_secondary:
    type: 'OS::Nova::Server'
    depends_on: magento_server
    properties:
      user_data: 
        str_replace:
          template: |
            #!/bin/bash
            curl "https://raw.githubusercontent.com/tbr0/managed-magento-small/master/resources/ansible-lamp-kick-orchestration.sh" | bash > /tmp/ansible-lamp.log
            curl "https://raw.githubusercontent.com/tbr0/managed-magento-small/master/resources/apache-create-virtualhost.sh" | bash -s -- $domain
            curl "https://raw.githubusercontent.com/tbr0/managed-magento-small/master/resources/varnish-install.sh" | bash
            yum install -y nfs-utils cachefilesd
            systemctl enable rpcbind && systemctl start rpcbind && systemctl enable cachefilesd && systemctl start cachefilesd
            mkdir -p /mnt/nfs-web01.$domain/media
            mkdir -p /mnt/nfs-web01.$domain/var
            echo "192.168.3.1:/var/www/vhosts/$domain/media /mnt/nfs-web01.$domain/media nfs rsize=32768,wsize=32768,intr,hard,noatime,proto=tcp,sync,fsc,_netdev 0 0" >> /etc/fstab
            echo "192.168.3.1:/var/www/vhosts/$domain/var /mnt/nfs-web01.$domain/var nfs rsize=32768,wsize=32768,intr,hard,noatime,proto=tcp,sync,fsc,_netdev 0 0" >> /etc/fstab
            mount /mnt/nfs-web01.$domain/media
            mount /mnt/nfs-web01.$domain/var
            ln -s /mnt/nfs-web01.$domain/media /var/www/vhosts/$domain/media
            ln -s /mnt/nfs-web01.$domain/var /var/www/vhosts/$domain/var
            firewall-cmd --permanent --zone=public --add-port=6081/tcp && firewall-cmd --reload
          params:
            $domain: {get_param: magento_url}
      name:
        str_replace:
          params:
            domain:
              get_param: magento_url
          template: 'web02.domain'
      key_name:
        get_resource: ssh_key
      image:
        get_param: server_image
      software_config_transport: POLL_TEMP_URL
      flavor:
        get_param: server_flavor
      config_drive: true
      networks:
        - uuid: "00000000-0000-0000-0000-000000000000"
        - uuid: "11111111-1111-1111-1111-111111111111"
        - uuid: {get_resource: magento_network }
      metadata:
        rax-heat:
          get_param: 'OS::stack_id'
        build_config: 'base_mgdops_config'
